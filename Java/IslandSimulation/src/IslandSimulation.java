import java.util.*;
import java.util.concurrent.*;

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
abstract class Animal {
    protected double weight;
    protected int maxPopulation;
    protected int speed;
    protected double foodRequired;
    protected String symbol;
    protected int x;
    protected int y;

    public Animal(double weight, int maxPopulation, int speed, double foodRequired, String symbol) {
        this.weight = weight;
        this.maxPopulation = maxPopulation;
        this.speed = speed;
        this.foodRequired = foodRequired;
        this.symbol = symbol;
    }

    public String getSymbol() {
        return symbol;
    }

    public void setPosition(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public void moveToRandomLocation(int width, int height) {
        Random random = new Random();
        this.x = random.nextInt(width);
        this.y = random.nextInt(height);
    }

    abstract void eat();
    abstract void move(int width, int height, Location[][] locations);
    abstract void reproduce();
}

// –•–∏—â–Ω–∏–∫–∏
class Wolf extends Animal {
    public Wolf() {
        super(50, 30, 3, 8, "üê∫");
    }
    @Override void eat() { System.out.println("–í–æ–ª–∫ –æ—Ö–æ—Ç–∏—Ç—Å—è"); }
    @Override void move(int width, int height, Location[][] locations) {
        locations[this.x][this.y].getAnimals().remove(this); // –£–¥–∞–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        moveToRandomLocation(width, height); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
        locations[this.x][this.y].addAnimal(this); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        System.out.println("–í–æ–ª–∫ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (" + x + ", " + y + ")");
    }
    @Override void reproduce() { System.out.println("–í–æ–ª–∫ —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è"); }
}

class Boa extends Animal {
    public Boa() {
        super(15, 30, 1, 3, "üêç");
    }
    @Override void eat() { System.out.println("–£–¥–∞–≤ –µ—Å—Ç"); }
    @Override void move(int width, int height, Location[][] locations) {
        locations[this.x][this.y].getAnimals().remove(this); // –£–¥–∞–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        moveToRandomLocation(width, height); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
        locations[this.x][this.y].addAnimal(this); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        System.out.println("–£–¥–∞–≤ –ø–æ–ª–∑–µ—Ç –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (" + x + ", " + y + ")");
    }
    @Override void reproduce() { System.out.println("–£–¥–∞–≤ —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è"); }
}

class Fox extends Animal {
    public Fox() {
        super(8, 30, 2, 2, "ü¶ä");
    }
    @Override void eat() { System.out.println("–õ–∏—Å–∞ –æ—Ö–æ—Ç–∏—Ç—Å—è"); }
    @Override void move(int width, int height, Location[][] locations) {
        locations[this.x][this.y].getAnimals().remove(this); // –£–¥–∞–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        moveToRandomLocation(width, height); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
        locations[this.x][this.y].addAnimal(this); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        System.out.println("–õ–∏—Å–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (" + x + ", " + y + ")");
    }
    @Override void reproduce() { System.out.println("–õ–∏—Å–∞ —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è"); }
}

class Bear extends Animal {
    public Bear() {
        super(500, 5, 2, 80, "üêª");
    }
    @Override void eat() { System.out.println("–ú–µ–¥–≤–µ–¥—å –∏—â–µ—Ç –ø–∏—â—É"); }
    @Override void move(int width, int height, Location[][] locations) {
        locations[this.x][this.y].getAnimals().remove(this); // –£–¥–∞–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        moveToRandomLocation(width, height); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
        locations[this.x][this.y].addAnimal(this); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        System.out.println("–ú–µ–¥–≤–µ–¥—å –±—Ä–æ–¥–∏—Ç –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (" + x + ", " + y + ")");
    }
    @Override void reproduce() { System.out.println("–ú–µ–¥–≤–µ–¥—å —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è"); }
}

class Eagle extends Animal {
    public Eagle() {
        super(6, 20, 3, 1, "ü¶Ö");
    }
    @Override void eat() { System.out.println("–û—Ä–µ–ª –æ—Ö–æ—Ç–∏—Ç—Å—è"); }
    @Override void move(int width, int height, Location[][] locations) {
        locations[this.x][this.y].getAnimals().remove(this); // –£–¥–∞–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        moveToRandomLocation(width, height); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
        locations[this.x][this.y].addAnimal(this); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        System.out.println("–û—Ä–µ–ª –ª–µ—Ç–∏—Ç –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (" + x + ", " + y + ")");
    }
    @Override void reproduce() { System.out.println("–û—Ä–µ–ª —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è"); }
}

// –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ
class Deer extends Animal {
    public Deer() {
        super(300, 20, 4, 50, "ü¶å");
    }
    @Override void eat() { System.out.println("–û–ª–µ–Ω—å –ø–∞—Å–µ—Ç—Å—è"); }
    @Override void move(int width, int height, Location[][] locations) {
        locations[this.x][this.y].getAnimals().remove(this); // –£–¥–∞–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        moveToRandomLocation(width, height); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
        locations[this.x][this.y].addAnimal(this); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        System.out.println("–û–ª–µ–Ω—å –±–µ–∂–∏—Ç –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (" + x + ", " + y + ")");
    }
    @Override void reproduce() { System.out.println("–û–ª–µ–Ω—å —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è"); }
}

class Rabbit extends Animal {
    public Rabbit() {
        super(2, 150, 2, 0.45, "üêá");
    }
    @Override void eat() { System.out.println("–ö—Ä–æ–ª–∏–∫ –µ—Å—Ç —Ç—Ä–∞–≤—É"); }
    @Override void move(int width, int height, Location[][] locations) {
        locations[this.x][this.y].getAnimals().remove(this); // –£–¥–∞–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        moveToRandomLocation(width, height); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
        locations[this.x][this.y].addAnimal(this); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        System.out.println("–ö—Ä–æ–ª–∏–∫ –ø—Ä—ã–≥–∞–µ—Ç –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (" + x + ", " + y + ")");
    }
    @Override void reproduce() { System.out.println("–ö—Ä–æ–ª–∏–∫ —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è"); }
}

class Mouse extends Animal {
    public Mouse() {
        super(0.05, 500, 1, 0.01, "üêÅ");
    }
    @Override void eat() { System.out.println("–ú—ã—à—å –µ—Å—Ç –∑–µ—Ä–Ω–æ"); }
    @Override void move(int width, int height, Location[][] locations) {
        locations[this.x][this.y].getAnimals().remove(this); // –£–¥–∞–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        moveToRandomLocation(width, height); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
        locations[this.x][this.y].addAnimal(this); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        System.out.println("–ú—ã—à—å —à—É—Ä—à–∏—Ç –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (" + x + ", " + y + ")");
    }
    @Override void reproduce() { System.out.println("–ú—ã—à—å —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è"); }
}

class Caterpillar extends Animal {
    public Caterpillar() {
        super(0.01, 1000, 0, 0, "üêõ");
    }
    @Override void eat() { System.out.println("–ì—É—Å–µ–Ω–∏—Ü–∞ –µ—Å—Ç –ª–∏—Å—Ç—å—è"); }
    @Override void move(int width, int height, Location[][] locations) {
        locations[this.x][this.y].getAnimals().remove(this); // –£–¥–∞–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        moveToRandomLocation(width, height); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
        locations[this.x][this.y].addAnimal(this); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        System.out.println("–ì—É—Å–µ–Ω–∏—Ü–∞ –ø–æ–ª–∑–µ—Ç –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (" + x + ", " + y + ")");
    }
    @Override void reproduce() { System.out.println("–ì—É—Å–µ–Ω–∏—Ü–∞ —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è"); }
}

// –õ–æ–∫–∞—Ü–∏—è
class Location {
    private List<Animal> animals = new CopyOnWriteArrayList<>();
    public void addAnimal(Animal animal) { animals.add(animal); }
    public void removeAnimal(Animal animal) { animals.remove(animal); }
    public List<Animal> getAnimals() { return animals; }
}

// –û—Å—Ç—Ä–æ–≤ —Å –ø—Å–µ–≤–¥–æ–≥—Ä–∞—Ñ–∏–∫–æ–π
class Island {
    private final int width;
    private final int height;
    private final Location[][] locations;
    private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(3);

    public Island(int width, int height) {
        this.width = width;
        this.height = height;
        locations = new Location[width][height];
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                locations[i][j] = new Location();
            }
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ω–∞ –∫–∞—Ä—Ç—É
        Random random = new Random();
        for (int i = 0; i < 10; i++) {
            Animal wolf = new Wolf();
            wolf.setPosition(random.nextInt(width), random.nextInt(height));
            locations[wolf.x][wolf.y].addAnimal(wolf);

            Animal deer = new Deer();
            deer.setPosition(random.nextInt(width), random.nextInt(height));
            locations[deer.x][deer.y].addAnimal(deer);

            Animal rabbit = new Rabbit();
            rabbit.setPosition(random.nextInt(width), random.nextInt(height));
            locations[rabbit.x][rabbit.y].addAnimal(rabbit);

            Animal mouse = new Mouse();
            mouse.setPosition(random.nextInt(width), random.nextInt(height));
            locations[mouse.x][mouse.y].addAnimal(mouse);

            Animal caterpillar = new Caterpillar();
            caterpillar.setPosition(random.nextInt(width), random.nextInt(height));
            locations[caterpillar.x][caterpillar.y].addAnimal(caterpillar);
        }
    }

    public void startSimulation() {
        executor.scheduleAtFixedRate(this::simulateCycle, 0, 1, TimeUnit.SECONDS);
    }

    private void simulateCycle() {
        System.out.println("\n–ù–æ–≤—ã–π —Ç–∞–∫—Ç —Å–∏–º—É–ª—è—Ü–∏–∏");
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                for (Animal animal : locations[i][j].getAnimals()) {
                    animal.eat();
                    animal.move(width, height, locations);
                    animal.reproduce();
                }
            }
        }
        draw();
    }

    public void draw() {
        System.out.println("\n–ö–∞—Ä—Ç–∞ –æ—Å—Ç—Ä–æ–≤–∞:");
        for (int j = 0; j < height; j++) {
            for (int i = 0; i < width; i++) {
                List<Animal> animals = locations[i][j].getAnimals();
                if (!animals.isEmpty()) {
                    System.out.print(animals.get(0).getSymbol());
                } else {
                    System.out.print(".");
                }
            }
            System.out.println();
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
public class IslandSimulation {
    public static void main(String[] args) {
        int gridWidth = 50; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –æ—Å—Ç—Ä–æ–≤–∞
        int gridHeight = 40; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ—Å—Ç—Ä–æ–≤–∞
        Island island = new Island(gridWidth, gridHeight);
        island.startSimulation();
    }
}
